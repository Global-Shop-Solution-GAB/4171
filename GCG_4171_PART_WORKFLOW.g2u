Program.Sub.ScreenSU.Start
Gui.F_WF..Create
Gui.F_WF..Caption("Workflow Information")
Gui.F_WF..Size(5970,6120)
Gui.F_WF..MinX(0)
Gui.F_WF..MinY(0)
Gui.F_WF..Position(0,0)
Gui.F_WF..BackColor(-2147483633)
Gui.F_WF..MousePointer(0)
Gui.F_WF..Event(UnLoad,F_WF_UnLoad)
Gui.F_WF.lblPart.Create(Label,"Part Number",True,1935,255,0,2790,255,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.lblWild.Create(Label,"Type",True,1140,255,0,195,255,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.txtPart.Create(TextBox,"",True,2505,300,0,2790,495,False,0,"Arial",8,-2147483643,1)
Gui.F_WF.txtPart.Locked(True)
Gui.F_WF.txtWild.Create(TextBox,"",True,2235,300,0,195,495,False,0,"Arial",8,-2147483643,1)
Gui.F_WF.txtWild.Locked(True)
Gui.F_WF.lblProg.Create(Label,"Program Number",True,1935,255,0,195,1005,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.lblPM.Create(Label,"Program Manager",True,1575,255,0,2100,1005,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.lblQE.Create(Label,"Quality Engineer",True,1935,255,0,3855,1005,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.txtPNo.Create(TextBox,"",True,1635,300,0,195,1245,True,0,"Arial",8,-2147483643,1)
Gui.F_WF.txtPNo.MaxLength(6)
Gui.F_WF.txtPM.Create(TextBox,"",True,1515,300,0,2100,1245,True,0,"Arial",8,-2147483643,1)
Gui.F_WF.txtPM.MaxLength(2)
Gui.F_WF.txtQE.Create(TextBox,"",True,1500,300,0,3855,1245,True,0,"Arial",8,-2147483643,1)
Gui.F_WF.txtQE.MaxLength(2)
Gui.F_WF.cmdSave.Create(Button)
Gui.F_WF.cmdSave.Size(1005,375)
Gui.F_WF.cmdSave.Position(4350,5040)
Gui.F_WF.cmdSave.Caption("Save")
Gui.F_WF.cmdSave.Event(Click,cmdSave_Click)
Gui.F_WF.cmdAdd.Create(Button)
Gui.F_WF.cmdAdd.Size(855,375)
Gui.F_WF.cmdAdd.Position(4500,1935)
Gui.F_WF.cmdAdd.Caption("Add")
Gui.F_WF.cmdAdd.Event(Click,cmdAdd_Click)
Gui.F_WF.cmdBrowser.Create(Button)
Gui.F_WF.cmdBrowser.Size(375,375)
Gui.F_WF.cmdBrowser.Position(4035,1935)
Gui.F_WF.cmdBrowser.Caption("^")
Gui.F_WF.cmdBrowser.Event(Click,cmdBrowser_Click)
Gui.F_WF.cmdDelete.Create(Button)
Gui.F_WF.cmdDelete.Size(1005,375)
Gui.F_WF.cmdDelete.Position(300,5040)
Gui.F_WF.cmdDelete.Caption("Delete")
Gui.F_WF.cmdDelete.Event(Click,cmdDelete_Click)
Gui.F_WF.txtFileDir.Create(TextBox,"",True,3735,300,0,195,1995,True,0,"Arial",8,-2147483643,1)
Gui.F_WF.lblFileDir.Create(Label,"File",True,1935,255,0,195,1755,True,0,"Arial",8,-2147483633,0)
Gui.F_WF.lvwFiles.Create(ListView)
Gui.F_WF.lvwFiles.Size(5430,2535)
Gui.F_WF.lvwFiles.Position(135,2370)
Gui.F_WF.lvwFiles.View(2)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Variable.Global.bFlag.Declare(Boolean,False)
Variable.Global.iID.Declare(Long,0)

Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

'Modified by FEQ on April 2017. Adding notification emails at trigger points of each work flow

V.Local.sError.Declare(String)
v.Local.iID.Declare(long)
v.Local.sTitle.Declare(string)
v.Local.sPart.Declare(string)
v.Local.sRev.Declare(string)
v.Local.sSQL.Declare(string)
v.Local.sRet.Declare(string)
V.Local.sIdRet.Declare(String)

f.ODBC.Connection!Con.OpenConnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass)
'Meta Data will be stored in 0:Part, 1:Rev, 2:Loc
f.Intrinsic.Control.SelectCase(v.Caller.Hook)

F.Intrinsic.Control.Case(10185)
'Save button for Parts Post hook
'Check to make sure we are in Open or New switch
f.Intrinsic.Control.If(v.Caller.Switches,=,"O","OR",v.Caller.Switches,=,"N")
	'we need to first check to see if a WorkFlow already exists for the Part rev loc
	F.Intrinsic.String.Build("SELECT REF_1, TEMPLATE FROM ATG_WF_HEADER WHERE META_0 = '{0}' AND META_1 = '{1}' AND META_2 = '{2}' ",v.Passed.000007.Trim,v.Passed.000008.Trim,v.Passed.000009.Trim,v.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("Exists", "Con", V.Local.sSQL)
	F.Data.Dictionary.SetDefaultReturn("Exists", "-1")
'	f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
'	F.Intrinsic.String.Replace(V.Local.sRet,"*!*","",V.Local.sRet)
	F.Intrinsic.Control.If(V.Dictionary.Exists!NPR,=,"-1")
		'This means there is no NPR Workflow on record, so we check to see if we need to make one
		'we need to see what trigger and PPAP values are
		f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
		f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		'check to see if from part is checked as triggered from Trigger_part.Inventory_Mst3
		f.Intrinsic.String.Build("SELECT TRIGGER_PART,BOM_REF FROM V_INVENTORY_MST3 WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sPart.Trim,V.Passed.000009.Trim,v.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
		'we need to split at *!* to get trigger and bom_ref
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.RedimPreserve(0,1)
		f.Intrinsic.Control.If(v.Local.sRet(0).Trim,=,"Y")
			'Get ID for Inventory-Trigger
			f.Global.WorkFlow.GetTemplateIDFromTitle("New Product Release",v.Local.iID)
						
			f.Intrinsic.Control.If(v.Local.iID,<=,0)
				'we don't have the work flow set up
				f.Intrinsic.UI.Msgbox("Template Work Flow: 'New Product Release' does not exist. No Work Flow Created", "Workflow Template Error")
			f.Intrinsic.Control.Else
				'we have it so create one
				'Create part rev
				f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
				f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
				f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
				
				
				Gui.F_WF.txtPart.Text(V.Local.sPart)
				Gui.F_WF.txtWild.Text("New Product Release")
				Gui.F_WF..Show
				
				Gui.F_WF..WaitForDismiss
							
				'create a new title with the part name
				f.Intrinsic.String.Build("NPR-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
				f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,"1",v.Local.iID)
				V.Global.iID.Set(V.Local.iID)
				'Set meta data in the header
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000009)
				'Set meta data in the lines
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000009)
				
				F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "NPR")
				F.Intrinsic.Control.CallSub(setdata)
				
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Dictionary.Exists!PPAP, =, "-1")
		f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
		f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		'check to see if from part is checked as triggered from Trigger_part.Inventory_Mst3
		f.Intrinsic.String.Build("SELECT BOM_REF FROM V_INVENTORY_MST3 WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sPart.Trim,V.Passed.000009.Trim,v.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
		'we need to split at *!* to get trigger and bom_ref
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)	
		'if bom_ref = Y then fire Inventory-PPAP
		f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"Y")
			'Get ID for Inventory-PPAP
			f.Global.WorkFlow.GetTemplateIDFromTitle("PPAP Approval",v.Local.iID)
			f.Intrinsic.Control.If(v.Local.iID,=,-1)
				'we don't have the work flow set up
				f.Intrinsic.UI.Msgbox("Template Work Flow: 'PPAP Approval' does not exist. No Work Flow Created", "Workflow Template Error")
			f.Intrinsic.Control.Else
				'we have it so create one
				'Create part rev
				f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
				f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
				f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
				
				Gui.F_WF.txtPart.Text(V.Local.sPart)
				Gui.F_WF.txtWild.Text("PPAP Approval")
				Gui.F_WF..Show
				
				Gui.F_WF..WaitForDismiss
							
				'create a new title with the part name
				f.Intrinsic.String.Build("PPAP-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
				f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,1,v.Local.iID)
				V.Global.iID.Set(V.Local.iID)
				'Set meta data in the header
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000009)
				'Set meta data in the lines
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000009)
				
				F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "PPAP")
				F.Intrinsic.Control.CallSub(setdata)	
				
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.If(V.Dictionary.Exists!OBS, =, "-1")
		v.Local.sRet.Redim(0,0)
		f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
		f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		'We need to see if the part is obsolete
		f.Intrinsic.String.Build("SELECT OBSOLETE_FLAG FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sPart.Trim,V.Passed.000009.Trim,v.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		'get rid of the extra *!*
		f.Intrinsic.String.Replace(v.Local.sRet,"*!*","",v.Local.sRet)
		'if obsolete_flag = Y then fire Inventory-Obsolete
		f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"Y")
			'check to see if one has been made
			F.Intrinsic.String.Build("SELECT REF_1 FROM ATG_WF_HEADER WHERE META_0 = '{0}' AND META_1 = '{1}' AND META_2 = '{2}' AND REF_1 = 'OBS'",v.Passed.000007.Trim,v.Passed.000008.Trim,v.Passed.000009.Trim,v.Local.sSQL)				
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet, <>, "")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Get ID for Inventory-Obsolete
			f.Global.WorkFlow.GetTemplateIDFromTitle("Part Obsolete",v.Local.iID)
			f.Intrinsic.Control.If(v.Local.iID,=,-1)
				'we don't have the work flow set up
				f.Intrinsic.UI.Msgbox("Template Work Flow: Part Obsolete does not exist. No Work Flow Created", "Workflow Template Error")
			f.Intrinsic.Control.Else
				'we have it so create one
				'Create part rev
				f.Intrinsic.String.RPad(v.Passed.000007," ",17,v.Local.sPart)
				f.Intrinsic.String.RPad(v.Passed.000008," ",3,v.Local.sRev)
				f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
				
				Gui.F_WF.txtPart.Text(V.Local.sPart)
				Gui.F_WF.txtWild.Text("Part Obsolete")
				Gui.F_WF..Show
				
				Gui.F_WF..WaitForDismiss
							
				'create a new title with the part name
				f.Intrinsic.String.Build("OBS-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
				f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,1,v.Local.iID)
				V.Global.iID.Set(V.Local.iID)
				'Set meta data in the header
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000009)
				'Set meta data in the lines
				'Set meta data 0 as part
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000007)
				'Set meta data 1 as Rev
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000008)
				'Set meta data 2 as loc
				f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000009)
				
				F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "OBS")
				F.Intrinsic.Control.CallSub(setdata)
				
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Case(13320)
'Ok Button on Copy
'Check to see if we are on copy
f.Intrinsic.Control.If(v.Caller.Switches,=,"C")
	'we need to get the old part
	'Part 000005
	'Rev 000006
	'Loc 000008
	
	'New part will be
	'Part 000009
	'Rev 000010
	'Loc 000011
	f.Intrinsic.String.RPad(v.Passed.000005," ",17,v.Local.sPart)
	f.Intrinsic.String.RPad(v.Passed.000006," ",3,v.Local.sRev)
	f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
	'check to see if from part is checked as triggered from Trigger_part.Inventory_Mst3
	f.Intrinsic.String.Build("SELECT TRIGGER_PART,BOM_REF FROM V_INVENTORY_MST3 WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sPart,V.Passed.000008.Trim,v.Local.sSQL)
	
	
	f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	'we need to split at *!* to get trigger and bom_ref
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	v.Local.sRet.RedimPreserve(0,1)
	f.Intrinsic.Control.If(v.Local.sRet(0),=,"Y")
		'We have a trigger so create the work flow
		
		f.Intrinsic.String.RPad(v.Passed.000009," ",17,v.Local.sPart)
		f.Intrinsic.String.RPad(v.Passed.000010," ",3,v.Local.sRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		
		
		'Get ID for Inventory-Trigger
		f.Global.WorkFlow.GetTemplateIDFromTitle("New Product Release",v.Local.iID)
		f.Intrinsic.Control.If(v.Local.iID,=,-1)
			'we don't have the work flow set up
			f.Intrinsic.UI.Msgbox("Template Work Flow: New Product Release does not exist. No Work Flow Created", "Workflow Template Error")
		f.Intrinsic.Control.Else
			'we have it so create one
			'Create part rev
			f.Intrinsic.String.RPad(v.Passed.000009," ",17,v.Local.sPart)
			f.Intrinsic.String.RPad(v.Passed.000010," ",3,v.Local.sRev)
			f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		
			Gui.F_WF.txtPart.Text(V.Local.sPart)
			Gui.F_WF.txtWild.Text("New Product Release")
			Gui.F_WF..Show
			
			Gui.F_WF..WaitForDismiss
						
			'create a new title with the part name
			f.Intrinsic.String.Build("NPR-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
			'create a new title with the part name
			f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,1,v.Local.iID)
			V.Global.iID.Set(V.Local.iID)
			'Set meta data in the header
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000011)
			'Set meta data in the lines
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000011)
			
			F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "NPR")
			F.Intrinsic.Control.CallSub(setdata)
												
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'Check for PPAP
	f.Intrinsic.Control.If(v.Local.sRet(1),=,"Y")
		'we have a PPAP so create the workflow
		'Get ID for Inventory-PPAP
		f.Global.WorkFlow.GetTemplateIDFromTitle("PPAP Approval",v.Local.iID)
		f.Intrinsic.Control.If(v.Local.iID,=,-1)
			'we don't have the work flow set up
			f.Intrinsic.UI.Msgbox("Template Work Flow: PPAP Approval does not exist. No Work Flow Created", "Workflow Template Error")
		f.Intrinsic.Control.Else
			'we have it so create one
			'Create part rev
			f.Intrinsic.String.RPad(v.Passed.000009," ",17,v.Local.sPart)
			f.Intrinsic.String.RPad(v.Passed.000010," ",3,v.Local.sRev)
			f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		
			Gui.F_WF.txtPart.Text(V.Local.sPart)
			Gui.F_WF.txtWild.Text("Inventory PPAP")
			Gui.F_WF..Show
			
			Gui.F_WF..WaitForDismiss
						
			'create a new title with the part name
			f.Intrinsic.String.Build("PPAP-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
			f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,1,v.Local.iID)
			V.Global.iID.Set(V.Local.iID)
			'Set meta data in the header
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000011)
			'Set meta data in the lines
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000011)
			
			F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "PPAP")
			F.Intrinsic.Control.CallSub(setdata)					
			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	v.Local.sRet.Redim(0,0)
	'We need to see if the part is obsolete
	f.Intrinsic.String.Build("SELECT OBSOLETE_FLAG FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sPart,V.Passed.000008.Trim,v.Local.sSQL)
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	'get rid of the extra *!*
	f.Intrinsic.String.Replace(v.Local.sRet,"*!*","",v.Local.sRet)
	'check for Obsolete
	f.Intrinsic.Control.If(v.Local.sRet,=,"Y")
		'we have Obsolete so create the workflow
		'Get ID for Inventory-Obsolete
		f.Global.WorkFlow.GetTemplateIDFromTitle("Part Obsolete",v.Local.iID)
		f.Intrinsic.Control.If(v.Local.iID,=,-1)
			'we don't have the work flow set up
			f.Intrinsic.UI.Msgbox("Template Work Flow: Part Obsolete does not exist. No Work Flow Created")
		f.Intrinsic.Control.Else
			'we have it so create one
			'Create part rev
			f.Intrinsic.String.RPad(v.Passed.000009," ",17,v.Local.sPart)
			f.Intrinsic.String.RPad(v.Passed.000010," ",3,v.Local.sRev)
			f.Intrinsic.String.Build("{0}{1}",v.Local.sPart,v.Local.sRev,v.Local.sPart)
		
			Gui.F_WF.txtPart.Text(V.Local.sPart)
			Gui.F_WF.txtWild.Text("Part Obsolete")
			Gui.F_WF..Show
			
			Gui.F_WF..WaitForDismiss
						
			'create a new title with the part name
			f.Intrinsic.String.Build("OBS-{0}-{1}-{2}-{3}",v.Local.sPart.Trim,V.Screen.F_WF!txtPNo.Text, V.Screen.F_WF!txtPM.Text, V.Screen.F_WF!txtQE.Text, V.Local.sTitle)
			f.Global.WorkFlow.CreateFromTemplate(v.Local.iID,V.Local.sTitle,v.Ambient.Date,v.Ambient.Date,v.Caller.User,1,v.Local.iID)
			V.Global.iID.Set(V.Local.iID)
			'Set meta data in the header
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,1,2,v.Passed.000011)
			'Set meta data in the lines
			'Set meta data 0 as part
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,0,v.Passed.000009)
			'Set meta data 1 as Rev
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,1,v.Passed.000010)
			'Set meta data 2 as loc
			f.Global.WorkFlow.SetMetaData(v.Local.iID,0,2,v.Passed.000011)

			F.Global.WorkFlow.SetReferenceData(V.Local.iID, 1, "OBS")
			F.Intrinsic.Control.CallSub(setdata)
								
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
F.Intrinsic.Control.Case("34700")
'This hook gets fired when a line is completed
F.Intrinsic.Control.CallSub(sendnotifications)

F.Intrinsic.Control.Case("34701")
'This hook gets fired when a line is signed off. The customer does not require a sign off, so it is all done during the completed hook
	
f.Intrinsic.Control.EndSelect

f.ODBC.Connection!Con.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4171_PART_WORKFLOW",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(f_wf_unload)
Function.Intrinsic.Control.EndIf
Program.Sub.Main.End

Program.Sub.cmdSave_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdSave_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.sType.Declare(String)
V.Local.sType.Set(V.Screen.F_WF!txtWild.Text)

F.Intrinsic.Control.If(V.Screen.F_WF!txtPM.Text, =, "")
	F.Intrinsic.UI.Msgbox("Please include Project Manager initials", "Missing Info for Workflow creation")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.F_WF!txtPNo.Text, =, "")
	F.Intrinsic.UI.Msgbox("Please include Program Number", "Missing Info for Workflow creation")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.F_WF!txtQE.Text, =, "")
	F.Intrinsic.UI.Msgbox("Please include Quality Engineer initials", "Missing Info for Workflow creation")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

Gui.F_WF..Visible(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdSave_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4171_PART_WORKFLOW.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(f_wf_unload)
Function.Intrinsic.Control.EndIf


Program.Sub.cmdSave_Click.End

Program.Sub.SetData.Start
F.Intrinsic.Control.SetErrorHandler("SetData_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sFiles.Declare(String)
V.Local.iCount.Declare(String)
V.Local.sDocId.Declare(String)
V.Local.sFilePath.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sType.Declare(String)

F.Global.WorkFlow.SetReferenceData(V.Global.iID, 2, V.Screen.F_WF!txtPart.Text)
F.Global.WorkFlow.SetReferenceData(V.Global.iID, 3, V.Screen.F_WF!txtPNo.Text)
F.Global.WorkFlow.SetReferenceData(V.Global.iID, 4, V.Screen.F_WF!txtPM.Text)
F.Global.WorkFlow.SetReferenceData(V.Global.iID, 5, V.Screen.F_WF!txtQE.Text)

Gui.F_WF.lvwFiles.RetrieveAllListItems(V.Local.sFiles)
F.Intrinsic.Control.If(V.Local.sFiles, <>, "***NORETURN***")
F.Intrinsic.String.Split(V.Local.sFiles, "*!*", V.Local.sFiles)
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.sFiles.UBound, 1)
		
		F.Intrinsic.String.Split(v.Local.sFiles(v.Local.iCount), "\", V.Local.sFileName)
		F.Intrinsic.String.Split(v.Local.sFileName(v.Local.sFileName.UBound), ".", v.Local.sType)
		V.Local.sSQL.Set("Select Top 1 ACtive_Doc_ID from ATG_WF_ACTIVE_DOCS Order by ACtive_Doc_ID desc")
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sDocId)
		F.Intrinsic.Math.Add(V.Local.sDocId.Long, 1, V.Local.sDocId)
	
	    F.Intrinsic.String.Build("Insert Into ATG_WF_Active_Docs (Doc_ID, File_Name, Active_Doc_ID) Values('{0}', '{1}', '{0}')", v.Local.sDocId, v.Local.sFiles(v.Local.iCount).Trim, v.Local.sSQL)
	    Function.ODBC.Connection!Con.Execute(V.Local.sSQL)
	    F.Intrinsic.String.Build("Insert Into ATG_WF_Doc_Ref (Assoc_ID, Assoc_Type, Doc_ID) Values('{0}', '1','{1}')", V.Global.iID, V.Local.sDocId, v.Local.sSQL)
	    Function.ODBC.Connection!Con.Execute(V.Local.sSQL)
		
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf

Gui.F_WF.txtPM.Text("")
Gui.F_WF.txtPNo.Text("")
Gui.F_WF.txtQE.Text("")
Gui.F_WF.txtWild.Text("")
Gui.F_WF.lvwFiles.ClearItems

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetData_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4171_PART_WORKFLOW.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(f_wf_unload)
Function.Intrinsic.Control.EndIf


Program.Sub.SetData.End

Program.Sub.SendNotifications.Start
F.Intrinsic.Control.SetErrorHandler("SendNotifications_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.iWFID.Declare(Long)
V.Local.iWFLine.Declare(Long)
V.Local.iCount.Declare(Long)
V.Local.iIndex.Declare(Long)
V.Local.iUserID.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sLineID.Declare(String)
V.Local.sDependents.Declare(String)
V.Local.sDependency.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sUser.Declare(String)
V.Local.sALL.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.sBody.Declare(String)
V.Local.sSubj.Declare(String)
V.Local.sSend.Declare(String)
V.Local.sAssoc.Declare(String)

V.Local.iWFID.Set(V.Passed.WFID)
V.Local.iWFLine.Set(V.Passed.WFLINE)

'Hoping to have functions that will take care of this for workflows automatically in the future. In the meantime we look in tables
'We collect the WF Id and Line that is being closed from the passed variables, then we get the line ID to look to see which lines were dependent of this line
F.Intrinsic.String.Build("Select LINE_ID from ATG_WF_LINES where WF_ID = '{0}' and LINE ='{1}' ", V.Local.iWFID, V.Local.iWFLine, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sLineID)
F.Intrinsic.String.Split(V.Local.sLineID, "#$#", V.Local.sLineID)

F.Data.Dictionary.CreateFromSQL("Completed", "Con", "Select Line_ID, COMPLETION_DATE from ATG_WF_LINES")
F.Data.Dictionary.SetDefaultReturn("Completed", "")

F.Data.DataTable.Create("NewLinesOpen")
F.Data.DataTable.AddColumn("NewLinesOpen", "LineID", "String")

F.Intrinsic.Control.If(V.Local.sLineID(0), <>, "")
	F.Intrinsic.String.Build("Select ASSOC_ID from ATG_WF_DEPENDENCY where DEPENDENCY = '{0}' ", V.Local.sLineID(0), V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sDependency)
	F.Intrinsic.String.Split(V.Local.sDependency, "#$#", V.Local.sDependency)
	'sDependency array will have all the lines that the closed like depended on, potential lines that will open
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.sDependency.UBound, 1)
		V.Local.sTemp.Set("Temp")
		F.Intrinsic.String.Split(V.Local.sDependency(V.Local.iCount), "*!*",  V.Local.sAssoc)

		F.Intrinsic.String.Build("Select DEPENDENCY, ASSOC_ID from ATG_WF_DEPENDENCY where ASSOC_ID = '{0}' ", V.Local.sAssoc(0).Long, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL(V.Local.sAssoc(0).Long, "Con", V.Local.sSQL)
		F.Data.DataTable.AddColumn(V.Local.sAssoc(0).Long, "Completed", "String")
		F.Data.DataTable.FillFromDictionary(V.Local.sAssoc(0).Long, "Completed", "DEPENDENCY", "Completed")
		F.Data.DataView.Create(V.Local.sAssoc(0).Long, "CompView", 22, "Completed = ''", "DEPENDENCY ASC")
		F.Intrinsic.Control.If(V.DataView.[V.Local.sTemp]!CompView.RowCount, =, 0)
			F.Data.DataTable.AddRow("NewLinesOpen", "LineID", V.Local.sAssoc(0))
		F.Intrinsic.Control.EndIf
		'close table and view
'		F.Data.DataView.Close(V.Local.sAssoc(0).Long, "CompView")
'		F.Data.DataTable.Close(V.Local.sAssoc(0).Long)
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf

'So now all lines that are newly open are stored in table "NewLinesOpen"
F.Data.Dictionary.CreateFromSQL("UserDic", "Con", "Select LINE_ID, USER_GROUP from ATG_WF_LINES")
F.Data.Dictionary.SetDefaultReturn("UserDic", "")
F.Data.DataTable.AddColumn("NewLinesOpen", "User", "String")
F.Data.DataTable.FillFromDictionary("NewLinesOpen", "UserDic", "LineID", "User")

F.Data.Dictionary.CreateFromSQL("WFID", "Con", "Select LINE_ID, WF_ID from ATG_WF_LINES")
F.Data.Dictionary.SetDefaultReturn("WFID", "")
F.Data.DataTable.AddColumn("NewLinesOpen", "WFID", "String")
F.Data.DataTable.FillFromDictionary("NewLinesOpen", "WFID", "LineID", "WFID")

F.Data.Dictionary.CreateFromSQL("Title", "Con", "Select WF_ID, TITLE from ATG_WF_HEADER")
F.Data.Dictionary.SetDefaultReturn("Title", "")
F.Data.DataTable.AddColumn("NewLinesOpen", "Title", "String")
F.Data.DataTable.FillFromDictionary("NewLinesOpen", "Title", "WFID", "Title")

F.Data.Dictionary.Create("NotGroups")

F.Global.Security.GetAllUsers(V.Caller.CompanyCode, V.Local.sALL)
F.Intrinsic.String.Split(V.Local.sALL, "*!*", V.Local.sALL)
F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.sALL.UBound, 1)
	F.Data.Dictionary.AddItem("NotGroups", V.Local.sALL(V.Local.iCount), V.Local.iCount)	
F.Intrinsic.Control.Next(V.Local.iCount)
F.Data.Dictionary.SetDefaultReturn("NotGroups", "")

F.Data.DataTable.AddColumn("NewLinesOpen", "IsGroup", "String")
F.Data.DataTable.FillFromDictionary("NewLinesOpen", "NotGroups", "User", "IsGroup")

'get sender name and email
F.Global.Security.GetUserEmail(V.Caller.User, V.Caller.CompanyCode, V.Local.sEmail)
F.Global.Security.GetFullName(V.Caller.User, V.Caller.CompanyCode, V.Local.sSend)
F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sEmail, V.Local.sSend, V.Local.sSend)
F.Global.Security.GetUserId(V.Caller.User, V.Caller.CompanyCode, V.Local.iUserID)

F.Intrinsic.Control.For(V.Local.iCount, 0, V.DataTable.NewLinesOpen.RowCount--, 1)
	V.Local.sUser.Set(V.DataTable.NewLinesOpen(V.Local.iCount).User!FieldValTrim)
	F.Intrinsic.Control.If(V.DataTable.NewLinesOpen(V.Local.iCount).NotGroups!FieldValTrim, <>, "")
		'Then it is a user group	
		'Build the strings for the body and the subject
		F.Intrinsic.String.Build("Tasks are now available to be completed on workflow {0} for user group {1}. " V.DataTable.NewLinesOpen(V.Local.iCount).Title!FieldValTrim, V.Local.sUser, V.Local.sBody)
		F.Intrinsic.String.Build("{0}Please complete the tasks within 1-2 business days of receiving this email. {1}{1}Thanks,{1}{1}Your Fellow Team Members", V.Local.sBody, V.Ambient.NewLine, V.Local.sBody)
		V.Local.sSubj.Set(V.DataTable.NewLinesOpen(V.Local.iCount).Title!FieldValTrim)
		'Then it is a user group	
		F.Global.Security.GetGroupEmails(V.Local.sUser, V.Caller.CompanyCode, V.Local.sEmail)
		F.Intrinsic.String.Split(V.Local.sEmail, "*!*", V.Local.sEmail)
		F.Intrinsic.Control.For(V.Local.iIndex, 0, V.Local.sEmail.UBound, 1)
			'send the emails
			F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, V.Local.iUserID, "", V.Local.sSubj, V.Local.sSend, V.Local.sEmail(V.Local.iIndex), V.Local.sBody)
			
		F.Intrinsic.Control.Next(V.Local.iIndex)
	F.Intrinsic.Control.Else
		'User
		'Build the strings for the body and the subject
		F.Intrinsic.String.Build("Tasks are now available to be completed on workflow {0} for user {1}. " V.DataTable.NewLinesOpen(V.Local.iCount).Title!FieldValTrim, V.Local.sUser, V.Local.sBody)
		F.Intrinsic.String.Build("{0}Please complete the tasks within 1-2 business days of receiving this email. {1}{1}Thanks,{1}{1}Your Fellow Team Members", V.Local.sBody, V.Ambient.NewLine, V.Local.sBody)
		V.Local.sSubj.Set(V.DataTable.NewLinesOpen(V.Local.iCount).Title!FieldValTrim)
		'Then it is a user group			
		F.Global.Security.GetUserEmail(V.Local.sUser, V.Caller.CompanyCode, V.Local.sEmail)	
		F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, V.Local.iUserID, "", V.Local.sSubj, V.Local.sSend, V.Local.sEmail, V.Local.sBody)	
	
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)



F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SendNotifications_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4171_PART_WORKFLOW.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)	
	F.Intrinsic.Control.CallSub(f_wf_unload)
Function.Intrinsic.Control.EndIf


Program.Sub.SendNotifications.End

Program.Sub.cmdBrowser_Click.Start
V.local.sRet.Declare(String)

Function.Intrinsic.UI.ShowOpenFileDialog("","", "",V.local.sRet)
F.Intrinsic.Control.If(V.Local.sRet, <>, "***CANCEL***")
	GUI.F_WF.txtFileDir.Text(V.Local.sRet)
F.Intrinsic.Control.EndIf

Program.Sub.cmdBrowser_Click.End

Program.Sub.cmdAdd_Click.Start
F.Intrinsic.Control.If(V.Screen.F_WF!txtFileDir.Text, <>, "")
	Gui.F_WF.lvwFiles.AddListItem(V.Screen.F_WF!txtFileDir.Text, V.Screen.F_WF!txtFileDir.Text)
	Gui.F_WF.txtFileDir.Text("")
F.Intrinsic.Control.EndIf
Program.Sub.cmdAdd_Click.End

Program.Sub.cmdDelete_Click.Start
Gui.F_WF.lvwFiles.RemoveItem(V.Screen.F_WF!lvwFiles.SelectedItemKey)
Program.Sub.cmdDelete_Click.End

Program.Sub.F_WF_UnLoad.Start
F.ODBC.Connection!Con.Close
F.Intrinsic.Control.End

Program.Sub.F_WF_UnLoad.End

Program.Sub.Comments.Start
${$0$}$GCG_4171_PART_WORKFLOW$}$Strider$}$8/17/2016 12:16:33 PM$}$False
${$1$}$$}$$}$1$}$13320$}$ok copy inv$}$8/18/2016 9:26:36 AM$}$
${$1$}$$}$$}$0$}$10185$}$post save inv mstr$}$8/18/2016 9:25:41 AM$}$
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This is a custom GAB script that will allow the user to create new workflow from new or copied parts in inventory.

File Path: Inventory>File>Inventory Parts>New or Copy

When the ?Save? button for new parts or the ?Ok? button for copy parts is selected the program will check to see if the ?Trigger Part?, 'Obsolete', or 'PPAP Approved' checkbox is checked for the new or copied part.

If the checkbox is checked, the associated workflow will be created based on the template already established by the user.


File Path:  Inventory>File>Inventory Parts>New or Copy

When the Save button for a new part or the OK button for copy parts is selected the program will check to see if the PPAP Approved is Checked.  This label was originally "BOM Type is Reference".  



Program.Sub.Comments.End